//----------------------------------------------------------------------------------------------------------------------------------
// 4. Билеты на поезд (https://leetcode.com/problems/min-cost-climbing-stairs)
//----------------------------------------------------------------------------------------------------------------------------------
// Поезд едет по заданному маршруту, проезжая через станции. Выходя на станции, пассажир должен покупать билет, чтобы сесть на следующий поезд и проехать дальше.

// Билет бывает двух типов: 1 тип дает возможность проехать одну станцию и выйти на следующей, 2 тип - проехать 2 станции подряд и выйти через одну. Оба типа билетов имеют одинаковую стоимость в той кассе, где продаются.

// Для каждой i-ой станции есть своя касса продажи билетов и указана цена билета во входном массиве. Например: “5,7,2”, это значит, что на 1 станции билет стоит 5, на второй - 7, на третьей - 2. Путь можно начать с первой или со второй станции.

// Напишите оптимальный алгоритм для поиска минимальной стоимости поездки по всему маршруту. Ограничение по времени выполнения - 100 мс.

// Формат ввода
// На вход подается строка из стоимостей в виде чисел, разделенных запятой. Каждая стоимость может быть в диапазоне от 0 до 1000. Входное значение не может быть пустой строкой и гарантировано содержит хотя бы два числа, но не больше 1000 чисел.

// "16,16,6,21,12,83,56"

// Формат вывода
// Выходное значение не может быть пустой строкой.

// "90"

function minCostClimbingStairs(line) {
    const prices = line.split(',').map(Number);
    let n = prices.length;
    let dp1 = 0; // Это будет dp[i-2]
    let dp2 = 0; // Это будет dp[i-1]

    let i = 2;
    while (i <= n) {
        let currentCost = Math.min(dp2 + prices[i - 1], dp1 + prices[i - 2]);

        dp1 = dp2;
        dp2 = currentCost;

        i++;
    }
    return dp2;
}

const numLine = '712, 227, 75, 287, 586, 628, 240, 932, 792, 581, 552, 168, 804, 648, 303, 433, 316, 937, 784, 27, 647, 528, 202, 127, 875, 832, 639, 64, 579, 287, 402, 144, 752, 314, 791, 90, 784, 459, 409, 45, 4, 353, 963, 932, 168, 948, 675, 302, 668, 880, 845, 487, 973, 404, 535, 148, 54, 960, 332, 221, 583, 551, 410, 51, 746, 55, 642, 145, 464, 460, 819, 191, 923, 103, 360, 35, 484, 881, 393, 797, 324, 610, 629, 937, 386, 777, 162, 973, 408, 424, 150, 875, 335, 244, 282, 944, 878, 490, 45, 556, 425, 501, 36, 296, 84, 724, 960, 556, 271, 205, 911, 713, 948, 462, 389, 977, 927, 961, 963, 793, 365, 609, 765, 192, 379, 370, 926, 717, 753, 69, 335, 754, 817, 206, 725, 519, 817, 610, 735, 172, 213, 334, 608, 939, 646, 406, 156, 388, 886, 608, 932, 733, 515, 244, 348, 550, 762, 10, 376, 647, 232, 369, 230, 142, 668, 214, 211, 25, 560, 152, 709, 706, 734, 406, 892, 188, 943, 400, 782, 252, 537, 57, 99, 916, 209, 452, 257, 74, 614, 373, 305, 855, 808, 330, 871, 988, 73, 269, 723, 676, 353, 780, 520, 656, 205, 164, 37, 206, 669, 151, 903, 383, 638, 744, 604, 350, 28, 388, 385, 845, 531, 454, 875, 539, 308, 920, 774, 844, 295, 262, 378, 982, 634, 258, 562, 635, 189, 270, 349, 983, 967, 35, 151, 580, 337, 239, 944, 631, 80, 65, 404, 310, 209, 596, 843, 566, 286, 954, 716, 557, 925, 514, 11'

console.log(minCostClimbingStairs(numLine))